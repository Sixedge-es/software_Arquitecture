üè¥‚Äç‚ò†Ô∏è Extreme programming üè¥‚Äç‚ò†Ô∏è
===================================

1. [Flujo de trabajo b√°sico de un ‚Äúextremme programmer‚Äù ](#1.-agile)
2. [Red-Green-Refactor](#2.-historias-de-usuario-(hu))
3. [Concepto de ‚Äúconvention over configuration‚Äù](#3.-posiciones-de-un-equipo-agile)
4. [Duplicidad](#4.-dise√±o-emergente)
5. [Monorepo](#continuos-integration-(ci)-and-continous-deployment-(cd))

1\. Flujo de trabajo b√°sico de un ‚Äúextremme programmer‚Äù 
---------
1. Antes de ponerme a trabajar compruebo que el entorno actual funciona. Una vez comprobado hago pull para obtener los √∫ltimos cambios y estar **integrado**.
2. Sincronizo el proyecto (pull) constantemente mientras trabajo. Contra m√°s constante sean los pulls menos partes tendr√°s que integrar, recuerda el problema siempre es la integraci√≥n.
3. Desarrollo la historia de usuario.
4. Acabo la tarea antes de plegar del trabajo?
	- Funciona: Check que funcione y hago testing, si todo OK, commit y push
	- No funciona: Arreglo o hago Red-Green-Refactor de nuevo.
5. No acabo la tarea antes de plegar del trabajo?
	- Tengo cosas √∫tiles: A√±ado un toggle, con una variable para activar/desactivar del c√≥digo los trozos que he hecho pero todav√≠a rompen el c√≥digo en Green o hacen que no 	funcione correctamente. Hago commit y push con la variable toggle que desactiva mi 			c√≥digo (de √©ste modo las personas que hagan pull no recibir√°n nada que les rompa el c√≥digo).
	- No tengo nada √∫til: No haces commit y haces hard reset para estar en Green al d√≠a 			siguiente.



‚ö†Ô∏è **Antes de implementar una feature tengo que asegurarme que estoy en verde**, es decir que funciona. ***Que significa que funcionar?*** Pues que cumples con unos criterios de aceptaci√≥n del cliente, por ejemplo que el programa no vaya lento, que el funcionamiento del programa sea el esperado, etc. üö®**Nunca implementar una feature si no estoy en verde, porque entonces como se que lo que estoy implementando funciona?**

2\. Red-Green-Refactor 
---------
1. El proyecto no funciona (RED)
2. Arreglo el problema y hago que funcione a cualquier precio: rendimiento, pulidez de c√≥digo, etc. ( GREEN)
3. Una vez funcionando (GREEN) me pongo a mejorarlo (REFACTOR).
Nota: El refactor implica mejorar el programa pero, hasta d√≥nde tengo que mejorarlo?
- Opci√≥n 1: hasta que funciona con las prestaciones que el usuario final/cliente espera o 		demanda.
- Opci√≥n 2: dejarlo mejor de lo que estaba cada vez que trabajes con √©l.

3\.Concepto de ‚Äúconvention over configuration‚Äù
---------
Es un concepto usado en la inform√°tica. B√°sicamente se pretende que se tiene que conectar de forma natural con el c√≥digo. Esto significa que el programa debe tener una configuraci√≥n por defecto y el programa arranque. De este modo nunca falla aunque el ejecutor del programa no ponga inicialmente ninguna configuraci√≥n. 
Para que no tenga configuraci√≥n obligatoria el programa no debe haber ning√∫n flag obligatorio, debe haber uno por default. 
El valor por defecto escogido para los flags debe ser el mejor possible para la mayor√≠a de los casos, a estos valores por defecto se les llama ***‚Äúsane defaults‚Äù***.

4\.Duplicidad
---------
La duplicidad del c√≥digo debe lanzar alarmas al developer, ya que suele indicar un **mal planteamiento del problema que se esta afrontando**. En estos casos suele ir bien parar y replantearse el sistema y hacer un refactor.

5\.Monorepo
---------
Un monorepo consiste en el concepto de que todos los servicios est√°n en un mismo repositorio y no en varios. De este modo no tienes que ir pulleando cada repo de cada uno de los servicios que deseas desplegar. Otra ventaja es que permite desplegar de manera mas f√°cil el entorno de desarrollo, adicionalmente al tener todo centralizado en un repositorio permite tener integraci√≥n continua dado que todos los cambios est√°n reflejados sobre el mismo repositorio.

